<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>soundlake</title><link href="https://soundlake.net/" rel="alternate"></link><link href="https://soundlake.net/feeds/all.atom.xml" rel="self"></link><id>https://soundlake.net/</id><updated>2018-04-08T02:00:00+02:00</updated><entry><title>The Exhaustive Guide to Build Pelican Blog with Github and Travis-CI</title><link href="https://soundlake.net/posts/2018/04/02/the-exhaustive-guide-to-build-pelican-blog-with-github-and-travis-ci/" rel="alternate"></link><published>2018-04-02T10:28:00+02:00</published><updated>2018-04-02T21:51:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2018-04-02:/posts/2018/04/02/the-exhaustive-guide-to-build-pelican-blog-with-github-and-travis-ci/</id><summary type="html">&lt;p&gt;A single document for the walkthrough setup your static page blog with Pelican on Github and Travis-CI.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I'm writing this mostly for archiving what I've done for setting up this blog.&lt;/p&gt;
&lt;p&gt;The internet is very big water, and you can whatever you want, but I couldn't
find a single document that explain everything.&lt;/p&gt;
&lt;p&gt;I know. In this software world, you can never &lt;em&gt;explain everything&lt;/em&gt;. But I
wanted a bit more kind and careful document to show me the walkthrough.&lt;/p&gt;
&lt;p&gt;The followings are the tech that I've used for setting up my new blog.&lt;/p&gt;
&lt;h3&gt;Setup in Local&lt;/h3&gt;
&lt;p&gt;Firstly, I've checked with &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;. There are many options, and actually
&lt;a href="https://github.com"&gt;Github&lt;/a&gt; seems easy with &lt;a href="https://jekyllrb.com"&gt;Jekyll&lt;/a&gt;, but &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; is not my best thing, while
I'm a kind of fond of &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, you can just install it with &lt;a href="https://pip.pypa.io"&gt;pip&lt;/a&gt; it, but there are a
somewhat downside of &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt;, which is &lt;a href="https://pip.pypa.io"&gt;pip&lt;/a&gt; installs those dependencies
globally.&lt;/p&gt;
&lt;p&gt;If you are familiar with &lt;a href="https://www.linux.org"&gt;Linux&lt;/a&gt; system, it looks rather natural and normal for
you, but if you are one of the modern developers who likes JavaScript eco
system like &lt;a href="https://www.npmjs.com"&gt;npm&lt;/a&gt;, then installing dependency only globally might look wierd.&lt;/p&gt;
&lt;h4&gt;VirtualEnv&lt;/h4&gt;
&lt;p&gt;Here comes &lt;a href="https://virtualenv.pypa.io"&gt;VirtualEnv&lt;/a&gt;. This tricks the system, and make the dependency able
to be installed locally avoiding to corrupt the whole system.&lt;/p&gt;
&lt;h5&gt;Install VirtualEnv&lt;/h5&gt;
&lt;p&gt;Fortunately, &lt;a href="https://www.debian.org"&gt;Debian&lt;/a&gt; team did a good job with keeping the packages up-to-date.
You can simply install &lt;a href="https://virtualenv.pypa.io"&gt;VirtualEnv&lt;/a&gt; by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Using VirtualEnv&lt;/h5&gt;
&lt;p&gt;Now, let's choose a directory, and make it the virtual environment of your
python system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virutalenv path/to/the/directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To enable the virtual environment, you should just run following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; path/to/the/directory
&lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;code&gt;source&lt;/code&gt;] is &lt;a href="https://www.gnu.org/software/bash"&gt;bash&lt;/a&gt;'s built-in command. According to the document, that I
linked, it does the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read and execute commands from the filename argument in the current shell
context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, &lt;code&gt;source bin/activate&lt;/code&gt; command read the file, and alter the &lt;a href="https://www.gnu.org/software/bash"&gt;bash&lt;/a&gt;'s
environment, and makes you can run executable in the virtual environment.&lt;/p&gt;
&lt;p&gt;That's why deactivating this virtual environment is so easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Becuase this &lt;code&gt;deactivate&lt;/code&gt; is already in your &lt;code&gt;PATH&lt;/code&gt;, although it won't be after
running this.&lt;/p&gt;
&lt;h4&gt;Pelican&lt;/h4&gt;
&lt;h5&gt;Install Pelican&lt;/h5&gt;
&lt;p&gt;After I activated the virtual environment, I've created a file called
&lt;code&gt;requirements.txt&lt;/code&gt;. It isn't necessarilly named like that, but it's on &lt;a href="https://pip.pypa.io"&gt;pip&lt;/a&gt;'s
&lt;a href="https://pip.pypa.io/en/stable/user_guide/#requirements-files"&gt;document&lt;/a&gt;, and
commonly used for &lt;a href="https://pip.pypa.io"&gt;pip&lt;/a&gt;'s dependency list.&lt;/p&gt;
&lt;p&gt;This is the content of the file. This is simple file, and each line has each
&lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; module name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican
markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; supports &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructedText&lt;/a&gt; by default, but it doesn't &lt;a href="https://daringfireball.net/projects/markdown"&gt;Markdown&lt;/a&gt;. I
personally prefer &lt;a href="https://daringfireball.net/projects/markdown"&gt;Markdown&lt;/a&gt; to &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructedText&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;Using Pelican&lt;/h5&gt;
&lt;p&gt;The next things to do is starting your &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; instance. The developers of
&lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; are kind enough to provide you a easy-bootstraping command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create some directories and files, including &lt;code&gt;Makefile&lt;/code&gt;,
&lt;code&gt;develop_server.sh&lt;/code&gt;, &lt;code&gt;pelicanconf.py&lt;/code&gt;, &lt;code&gt;publishconf.py&lt;/code&gt;. With first two files,
you have a bit of automation for building your &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; site locally during
developing. With the other two files, you can configure your &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; site as
you want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will turn on the watcher on &lt;code&gt;content&lt;/code&gt; directory, &lt;code&gt;themes&lt;/code&gt; directory, and
the configuration files including two that I mentioned above. Also, it turns on
the HTTP server which listens 8000 port by default.&lt;/p&gt;
&lt;h5&gt;Choosing a Theme&lt;/h5&gt;
&lt;p&gt;From &lt;a href="http://www.pelicanthemes.com"&gt;here&lt;/a&gt;, you can check various themes and its
screenshots. IIRC, all of them are hosted in &lt;a href="https://github.com"&gt;Github&lt;/a&gt;, and you can clone the
repository of the theme into your &lt;code&gt;themes&lt;/code&gt; directory. After set &lt;code&gt;THEME&lt;/code&gt; variable
to the path to the directory you've cloned, then it's good to go.&lt;/p&gt;
&lt;p&gt;There might be a few little changes necessary, like color, some configuration
variable, or even the layout of the theme.&lt;/p&gt;
&lt;h3&gt;Continuous Integration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; is one of popular CI service. And it's well integrated with
&lt;a href="https://github.com"&gt;Github&lt;/a&gt;. You can register to &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; with &lt;a href="https://github.com"&gt;Github&lt;/a&gt; account.&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt;, you can push your content and source into &lt;code&gt;master&lt;/code&gt; branch of
your &lt;a href="https://github.com"&gt;Github&lt;/a&gt;, and &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; will do the left, including building the source
and push to &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;
&lt;h4&gt;Github Repository&lt;/h4&gt;
&lt;p&gt;Here's a tip for the &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository you'll make. Don't use
&lt;code&gt;username.github.io&lt;/code&gt;. That repository is designed for using &lt;a href="https://github.com"&gt;Github&lt;/a&gt;'s default
making web site system, so using &lt;code&gt;gh-pages&lt;/code&gt; is simply not possible with this
repository.&lt;/p&gt;
&lt;p&gt;Let's make a new repository. You don't need to add any additional file, because
we are not going to clone this repository. Rather, we'll set it to the remote
repository of the local repository.&lt;/p&gt;
&lt;p&gt;If you haven't initialized your local repository, just do this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; path/to/the/directory
git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then with this command, set the remote repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin url_of_the_github_repo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you can push to the &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository, you've created.&lt;/p&gt;
&lt;h4&gt;Travis&lt;/h4&gt;
&lt;p&gt;Once you've created &lt;a href="https://github.com"&gt;Github&lt;/a&gt;'s public repository, you can find it in &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt;
dashboard. It's on &lt;code&gt;https://travis-ci.org/profile/{github_username}&lt;/code&gt;. In this
page, you can activate the continuous integration by your &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Now, you need to create &lt;code&gt;.travis.yml&lt;/code&gt; file in your repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3.6&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;only&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make publish&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;provider&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pages&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;skip-cleanup&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;github-token&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$GITHUB_TOKEN&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;keep-history&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;local-dir&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;branch&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is my configuration file. My configuration has mainly two part. The former
is to build the &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt; site, and the latter is to push to &lt;code&gt;gh-pages&lt;/code&gt; of the
&lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Note that there is &lt;code&gt;$GITHUB_TOKEN&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Github Token&lt;/h4&gt;
&lt;p&gt;My configuration of &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; pushes to my repository. To make it possible,
we need to tell &lt;a href="https://github.com"&gt;Github&lt;/a&gt; to allow &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; to do that. This is why the token
is required.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/"&gt;Here&lt;/a&gt;'s
how to create the token. When you create the token, don't forget to check
&lt;code&gt;public_repo&lt;/code&gt; scope. That's the scope that allows &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; to push a new
commits to your &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;After you create the token, copy it and go to &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt;'s repository settings
page. The url would be &lt;code&gt;https://travis-ci.org/{username}/{repo_name}/settings&lt;/code&gt;.
In that page, you can configure the environment variables. Creat a new variable
with &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; for the name and the copied token for the value.&lt;/p&gt;
&lt;p&gt;Now, if you push the &lt;code&gt;master&lt;/code&gt; branch, then &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; will be noticed. Then,
it will build, make a new commit, and push to &lt;code&gt;gh-pages&lt;/code&gt; branch. It's the time
to check out &lt;code&gt;https://{username}.github.io/{repo_name}&lt;/code&gt;&lt;/p&gt;</content><category term="github"></category><category term="travis"></category><category term="pelican"></category><category term="python"></category><category term="CI"></category></entry><entry><title>Best Practice to Check Table Information in MySQL</title><link href="https://soundlake.net/posts/2017/01/09/best-practice-to-check-table-information-in-mysql/" rel="alternate"></link><published>2017-01-09T10:00:00+01:00</published><updated>2018-04-03T22:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2017-01-09:/posts/2017/01/09/best-practice-to-check-table-information-in-mysql/</id><summary type="html">&lt;p&gt;There's a better way to check the table schema in MySQL.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I usually use &lt;code&gt;DESC&lt;/code&gt; to check the columns of the table,
which is similar to &lt;code&gt;EXPLAIN&lt;/code&gt;.
But it's not enough espeicially when I want to check indexes with columns.&lt;/p&gt;
&lt;p&gt;Recently, I got introduced of &lt;code&gt;SHOW CREATE TABLE&lt;/code&gt;.
It seems strange, but it shows the SQL for creating the table.
The result includes lot's of unnecessary lines, and you can clean them with &lt;code&gt;\G&lt;/code&gt; in the end.
So, if you want to check columns and indexes of the table, you can use the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;G&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="MySQL"></category><category term="MariaDB"></category></entry><entry><title>Add Binary Path in PowerShell</title><link href="https://soundlake.net/posts/2016/12/28/add-binary-path-in-powershell/" rel="alternate"></link><published>2016-12-28T10:00:00+01:00</published><updated>2018-04-03T21:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2016-12-28:/posts/2016/12/28/add-binary-path-in-powershell/</id><summary type="html">&lt;p&gt;Configure your PATH environment variable in PowerShell&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I need to use &lt;code&gt;makecert&lt;/code&gt; command in PowerShell, but &lt;code&gt;makecert.exe&lt;/code&gt; wasn't
there by default. So, I installed a few things. But still it didn't work. I found
the executable file under &lt;code&gt;C:\Program Files (x86)\Windows Kits\10\bin\x64\&lt;/code&gt;, but the
command wasn't recognized. Apparently, just like bash or other linux shell, it needs
profile file.&lt;/p&gt;
&lt;p&gt;The default path for the profile file is
&lt;code&gt;C:\Users\[username]\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt;.
It is stored in &lt;code&gt;$profile&lt;/code&gt; variable. You can check its value by simply typing the
variable in PowerShell.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But the file does not exist by default. You can check if the file exists with
typing in the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test-path &lt;span class="nv"&gt;$profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's no &lt;code&gt;touch&lt;/code&gt; command in PowerShell. Instead, there is &lt;code&gt;new-item&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;New-Item &lt;span class="nv"&gt;$profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, the directory does not exist either by default. You will see the
following error message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;New-Item : Could not find a part of the path
&amp;#39;C:\Users\[username]\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&amp;#39;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can easily create a directory with &lt;code&gt;mkdir&lt;/code&gt;. After creating the directory,
then try &lt;code&gt;New-Item&lt;/code&gt; command once again. Then, you have your own PowerShell
profile. In this file, you can add the following line, then restart the
PowerShell.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SYNOPSIS&lt;/span&gt;
      &lt;span class="nx"&gt;Adds&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Directory&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Current&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DESCRIPTION&lt;/span&gt;
      &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;directory&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;useful&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
      &lt;span class="nx"&gt;temporary&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt;
      &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;adjusting&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;within&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;powershell&lt;/span&gt;
      &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EXAMPLE&lt;/span&gt;
      &lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Directory&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C:\Program Files\Notepad++&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PARAMETER&lt;/span&gt; &lt;span class="nx"&gt;Directory&lt;/span&gt;
      &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;directory&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CmdletBinding&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
  &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;Mandatory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;$True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;$True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;ValueFromPipelineByPropertyName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;$True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;HelpMessage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What directory would you like to add?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]]&lt;/span&gt;&lt;span class="nx"&gt;$Directory&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;PROCESS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$env&lt;/span&gt;:&lt;span class="kt"&gt;PATH.Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$dir&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;$Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$Path&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="nx"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Verbose&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$dir is already present in PATH&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="nx"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Verbose&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$dir does not exist in the filesystem&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;$Path&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;$dir&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;$env&lt;/span&gt;:&lt;span class="kt"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Directory&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C:\Program Files (x86)\Windows Kits\10\bin\x64\&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code is create by &lt;a href="https://github.com/adrianhall"&gt;splunk&lt;/a&gt; and published in
&lt;a href="http://blogs.splunk.com/2013/07/29/powershell-profiles-and-add-path/"&gt;his blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More information for PowerShell profile in
&lt;a href="https://technet.microsoft.com/en-us/library/2008.10.windowspowershell.aspx"&gt;MicroSoft Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS. In my environment, running cusgom script was disabled. I had to run the
following command to enable to run the script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Set-ExecutionPolicy remotesigned
&lt;/pre&gt;&lt;/div&gt;</content><category term="Windows"></category><category term="PowerShell"></category><category term="environment"></category></entry><entry><title>A Good Example of HTTP HEAD Method</title><link href="https://soundlake.net/posts/2016/12/23/a-good-example-of-http-head-method/" rel="alternate"></link><published>2016-12-23T10:00:00+01:00</published><updated>2018-04-03T20:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2016-12-23:/posts/2016/12/23/a-good-example-of-http-head-method/</id><summary type="html">&lt;p&gt;HEAD method is not the most popular, but still it has a role.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've never been used &lt;code&gt;HEAD&lt;/code&gt; method in HTTP. I even don't know what
is in the HTTP method list. Usually I only use &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. I
rarely use &lt;code&gt;DELETE&lt;/code&gt; and &lt;code&gt;FETCH&lt;/code&gt;. But other than that I don't use
anything.&lt;/p&gt;
&lt;p&gt;But I had an issue. I got a RESTFul API for file storage. And at some
point I needed to check if the file exists. It's too much to &lt;code&gt;GET&lt;/code&gt; all
the payload of the file contents for checking if the file exists.
I was thinking if I should introduce the new API, but it's not RESTFul.&lt;/p&gt;
&lt;p&gt;And here we are. We have &lt;code&gt;HEAD&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.w3.org"&gt;w3&lt;/a&gt; explains about &lt;code&gt;HEAD&lt;/code&gt; following;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HEAD method is identical to GET except that the server MUST NOT
return a message-body in the response. The metainformation contained
in the HTTP headers in response to a HEAD request SHOULD be identical
to the information sent in response to a GET request. This method can
be used for obtaining metainformation about the entity implied by the
request without transferring the entity-body itself. This method is
often used for testing hypertext links for validity, accessibility,
and recent modification.&lt;/p&gt;
&lt;p&gt;The response to a HEAD request MAY be cacheable in the sense that the
information contained in the response MAY be used to update a previously
cached entity from that resource. If the new field values indicate that
the cached entity differs from the current entity (as would be indicated
by a change in Content-Length, Content-MD5, ETag or Last-Modified),
then the cache MUST treat the cache entry as stale.&lt;/p&gt;
&lt;p&gt;from &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html"&gt;HTTP methods&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I can just get the header with &lt;code&gt;HEAD&lt;/code&gt; method and check if the file exists
without downloading all the payload.&lt;/p&gt;</content><category term="http"></category><category term="restful"></category><category term="api"></category></entry><entry><title>Create dummy file in Linux</title><link href="https://soundlake.net/posts/2016/12/16/create-dummy-file-in-linux/" rel="alternate"></link><published>2016-12-16T10:00:00+01:00</published><updated>2018-04-03T17:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2016-12-16:/posts/2016/12/16/create-dummy-file-in-linux/</id><summary type="html">&lt;p&gt;A few options to create a dummy file in Linux&lt;/p&gt;</summary><content type="html">&lt;h3&gt;3 options to create a dummy file&lt;/h3&gt;
&lt;p&gt;Sometimes a big size dummy file is necessary.
There are roughly 3 ways to achieve this: &lt;code&gt;dd&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;fallocate&lt;/code&gt;.
I found them from &lt;a href="http://stackoverflow.com/questions/257844/quickly-create-a-large-file-on-a-linux-system"&gt;this Stackoverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;1. &lt;code&gt;dd&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;It's the most famous one, but it's basically for copy data from one to another
in hard way. It's accurate but slow. If you want just a dummy file, it's not a
good choice.&lt;/p&gt;
&lt;h4&gt;2. &lt;code&gt;truncate&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;It's maybe the fasted way. But it doesn't actually allocate the space. What it
does is cheat the file system with repetition of smaller amount of data. If you
really want to &lt;em&gt;allocate&lt;/em&gt; the space, it's not the best one.&lt;/p&gt;
&lt;h4&gt;3. &lt;code&gt;fallocate&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Now, it's the last and &lt;strong&gt;the best&lt;/strong&gt; option.&lt;/p&gt;
&lt;h3&gt;More about &lt;code&gt;fallocate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The basic usage is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fallocate -l &lt;span class="o"&gt;[&lt;/span&gt;length&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;filename&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="dummy"></category><category term="command"></category><category term="CLI"></category></entry><entry><title>Pelican Tips</title><link href="https://soundlake.net/posts/2014/12/21/pelican-tips/" rel="alternate"></link><published>2014-12-21T10:00:00+01:00</published><updated>2018-04-08T02:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2014-12-21:/posts/2014/12/21/pelican-tips/</id><summary type="html">&lt;h3&gt;&lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a essential tool for using GitHub Page as Pelican blog.
With this tool, I don't need to manage two repo;
one for generator, and the other for output, the actual blog.
Because this does all the messy things.
You just need to &lt;code&gt;make github&lt;/code&gt; and that's all …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;&lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a essential tool for using GitHub Page as Pelican blog.
With this tool, I don't need to manage two repo;
one for generator, and the other for output, the actual blog.
Because this does all the messy things.
You just need to &lt;code&gt;make github&lt;/code&gt; and that's all.&lt;/p&gt;
&lt;p&gt;It took a lot of time to find how to manage Pelican blog with Github,
and the answer was on the right by me.
Let's read the document carefully, and don't waste time.&lt;/p&gt;
&lt;h3&gt;Supported Syntax Highlight List&lt;/h3&gt;
&lt;p&gt;There is syntax highlighter for python.
Praise &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt;!
&lt;a href="http://pygments.org"&gt;Pygmets&lt;/a&gt;, It is called.
And this is the &lt;a href="http://pygments.org/docs/lexers"&gt;link&lt;/a&gt; for the list of supported Sytanx&lt;/p&gt;
&lt;h3&gt;Vim-Jinja2&lt;/h3&gt;
&lt;p&gt;In order to develop/customize theme of &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;,
&lt;a href="http://jinja.pocoo.org"&gt;Jinja2&lt;/a&gt;, I need.
For using VIM, I found &lt;a href="https://github.com/Glench/Vim-Jinja2-Syntax"&gt;Vim-Jinja2-Syntax&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Install&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~./vim_runtime/source_not_forked
git clone https://github.com/Glench/Vim-Jinja2-Syntax
git add Vim-Jinja2-Syntax
git commit -m &lt;span class="s2"&gt;&amp;quot;add jinja plugin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;How to Use&lt;/h4&gt;
&lt;p&gt;Jinja2 is HTML template, so usually its extension is &lt;code&gt;*.html&lt;/code&gt;.
Thus, VIM usually recognize it as HTML file.
So, I have to set filetype to &lt;code&gt;jinja&lt;/code&gt; to use this plugin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;jinja
&lt;/pre&gt;&lt;/div&gt;</content><category term="pelican"></category><category term="python"></category><category term="vim"></category></entry><entry><title>Travis 체험하기</title><link href="https://soundlake.net/posts/2014/12/20/hello-travis-ko/" rel="alternate"></link><published>2014-12-20T10:00:00+01:00</published><updated>2018-04-08T02:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2014-12-20:/posts/2014/12/20/hello-travis-ko/</id><summary type="html">&lt;p&gt;&lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;에 대해선 오래전부터 들어왔다.
뭔가를 자동화하는 도구라고 하는데,
딱히 사용해볼 기회가 없었다.
그런데 &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;으로 블로그를 시작하고 보니,
글을 포스팅하는 게 꽤 귀찮은 일이 되었다.
왜냐하면 보통은 웹사이트로 들어가 글을 쓰기만 하면 되는데,
이건 글을 쓴 다음, 글 저장소에 &lt;code&gt;push&lt;/code&gt;를 하고,
커맨드라인에서 &lt;code&gt;make github&lt;/code&gt; 명령을 또 해주어야 한다 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;에 대해선 오래전부터 들어왔다.
뭔가를 자동화하는 도구라고 하는데,
딱히 사용해볼 기회가 없었다.
그런데 &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;으로 블로그를 시작하고 보니,
글을 포스팅하는 게 꽤 귀찮은 일이 되었다.
왜냐하면 보통은 웹사이트로 들어가 글을 쓰기만 하면 되는데,
이건 글을 쓴 다음, 글 저장소에 &lt;code&gt;push&lt;/code&gt;를 하고,
커맨드라인에서 &lt;code&gt;make github&lt;/code&gt; 명령을 또 해주어야 한다.
원래는 한 단계면 될 것을 이젠 두 단계를 거쳐야 하는 거다.&lt;/p&gt;
&lt;p&gt;그러다가 &lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;이 글&lt;/a&gt;을 읽게 되었다. 이런 좋은 기회가.&lt;/p&gt;
&lt;h4&gt;삽질&lt;/h4&gt;
&lt;p&gt;일단 맥북에서 Travis를 설치하자...고 하는데, &lt;code&gt;gem install travis&lt;/code&gt;부터 막힌다.
아, 이럴 땐, &lt;a href="http://brew.sh"&gt;Homebrew&lt;/a&gt;로 &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;를 다시 빌드 하란다.
그러려면 &lt;a href="https://github.com/sstephenson/ruby-build"&gt;Ruby를 빌드할 도구&lt;/a&gt;가 필요하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install ruby-build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;도구가 설치되었으면 본격적으로 루비를 설치해볼까.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CONFIGURE_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--with-openssl-dir=brew --prefix openssl&amp;quot;&lt;/span&gt; rbenv-install &lt;span class="m"&gt;2&lt;/span&gt;.1.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그러나 또 에러 메세지가... -_-&lt;/p&gt;
&lt;p&gt;뭔가 &lt;a href="https://github.com/sstephenson/ruby-build/issues/602"&gt;이슈 스레드&lt;/a&gt;는 있지만,
답은 없는 분위기.&lt;/p&gt;
&lt;p&gt;에라 모르겠다 하고 &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;를 곧장 찾았다.
그런데 홈페이지에서 다 된다. -_-... 에효.&lt;/p&gt;
&lt;p&gt;아무튼 이 포스팅이 Travis를 이용한 첫 포스팅이 될 지도.&lt;/p&gt;
&lt;h5&gt;추가1. 2014.12.20.&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;1차 빌드에서는 markdown package가 없어서 실패.&lt;/li&gt;
&lt;li&gt;2차 빌드에서는 git 프로토콜을 사용할 수 없대서 실패.
그래도 원본 글에 아직 방법이 남았으니. 사용해 봐야지.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;추가2. 2014.12.21.&lt;/h5&gt;
&lt;p&gt;4차 빌드도 실패. 알고 봤더니, Travis를 로컬에 저장한 다음,
GitHub에서 토큰을 생성하고, 암호화시키는 과정을 해야했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CONFIGURE_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--with-openssl-dir=brew --prefix openssl&amp;quot;&lt;/span&gt; rbenv-install &lt;span class="m"&gt;2&lt;/span&gt;.1.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;에서 나온 &lt;code&gt;rbenv-hooks: command not found&lt;/code&gt; 에러 메세지로 찾으니
&lt;a href="https://github.com/sstephenson/rbenv"&gt;rbenv 깃헙 저장소&lt;/a&gt;가 나왔다.
README에 &lt;a href="https://github.com/sstephenson/rbenv#homebrew-on-mac-os-x"&gt;homebrew를 이용해 설치하는 법&lt;/a&gt;,
&lt;a href="https://github.com/sstephenson/rbenv#how-rbenv-hooks-into-your-shell"&gt;rbenv-hooks를 설치하는 법&lt;/a&gt;이
매우 잘 설명되어 있었다. (역시 README를 잘 읽어야 한다.)&lt;/p&gt;
&lt;p&gt;그러나. 아직 빌드 실패. &lt;code&gt;expected an absolute directory name for --prefix: openssl&lt;/code&gt;라는 에러메세지.
아까 homebrew가 빌드 하는 로그를 제대로 안 봤는데, 다시 보니,
이미 osx에 openssl이 설치되어 있어서, key만 있단다. &lt;code&gt;/usr/local/bin&lt;/code&gt;으로 링크조차 되지 않았다는 거다.
난 &lt;code&gt;--prefix&lt;/code&gt;가 뭔지 모르는데; 일단, homebrew에 설치된 openssl의 절대경로를 주고는 재도전.&lt;/p&gt;
&lt;h5&gt;추가3. 2014.12.22.&lt;/h5&gt;
&lt;p&gt;결국 포기. -_-.... 이게 안 되면 앞으로도 쭉 안 된다는 건데.
어마무지 귀찮구만. 지금으로서의 문제는 ruby-openssl 설치 불가능.
대안은 크게 두가지.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;가상환경을 구성한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt;에서 가상환경 돌리기&lt;/li&gt;
&lt;li&gt;이참에 &lt;a href="https://github.com/coreos/rocket"&gt;Rocket&lt;/a&gt; 맛보기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 CI(Continuous Integration)을 활용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다른 문서들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;a href="http://docs.python-guide.org/en/latest/scenarios/ci"&gt;Continuous Integration&lt;/a&gt;" in &lt;a href="http://docs/python-guide.org"&gt;Python Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;"&lt;a href="http://www.fullstackpython.com/continuous-integration.html"&gt;Continuous Integration&lt;/a&gt;" in &lt;a href="http://www.fullstackpython.com"&gt;Full Stack Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;손 뻗치면 닿을 대안들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jenkins-ci.org"&gt;Jenkins CI&lt;/a&gt; in Java&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.buildbot.net/current"&gt;Buildbot&lt;/a&gt; in Python&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mulesoft.org/documentation/display/current/Mule+Fundamentals"&gt;Mule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.go.cd"&gt;Go CD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Strider-CD/strider"&gt;Strider CD&lt;/a&gt; in Node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="automation"></category><category term="travis"></category><category term="ruby"></category><category term="pelican"></category></entry><entry><title>Stylus를 씁시다.</title><link href="https://soundlake.net/posts/2014/12/18/lets-use-stylus-ko/" rel="alternate"></link><published>2014-12-18T10:00:00+01:00</published><updated>2018-04-08T02:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2014-12-18:/posts/2014/12/18/lets-use-stylus-ko/</id><summary type="html">&lt;p&gt;CSS preprocessor들을 찾아보다가, 충동적으로 Stylus로 가기로 했다.
이게 다 &lt;a href="http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412"&gt;이 블로그&lt;/a&gt; 때문이다.
글이 무척이나 유혹적이었다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learnboost.github.io/stylus"&gt;Stylus 공식 홈페이지&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/learnboost/stylus"&gt;Stylus Github repo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1. Stylus 설치&lt;/h3&gt;
&lt;p&gt;이건 쉽다. 이미 나는 &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;가 설치되어 있으니&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g stylus
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이걸로 끝.&lt;/p&gt;
&lt;h3&gt;2. vim-stylus.vim 설치&lt;/h3&gt;
&lt;p&gt;문제는 내가 &lt;a href="http://www.vim.org"&gt;VIM&lt;/a&gt;에다가
이미 &lt;a href="https://github.com/amix/vimrc"&gt;일종의 플러그인 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;CSS preprocessor들을 찾아보다가, 충동적으로 Stylus로 가기로 했다.
이게 다 &lt;a href="http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412"&gt;이 블로그&lt;/a&gt; 때문이다.
글이 무척이나 유혹적이었다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learnboost.github.io/stylus"&gt;Stylus 공식 홈페이지&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/learnboost/stylus"&gt;Stylus Github repo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1. Stylus 설치&lt;/h3&gt;
&lt;p&gt;이건 쉽다. 이미 나는 &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;가 설치되어 있으니&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g stylus
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이걸로 끝.&lt;/p&gt;
&lt;h3&gt;2. vim-stylus.vim 설치&lt;/h3&gt;
&lt;p&gt;문제는 내가 &lt;a href="http://www.vim.org"&gt;VIM&lt;/a&gt;에다가
이미 &lt;a href="https://github.com/amix/vimrc"&gt;일종의 플러그인 모음집&lt;/a&gt;을 덧붙여 사용하고 있다는 건데,
이게 폴더 구성이 좀 복잡해서 새 플러그인 설치할 때마다 까먹고는 다시 찾아봐야 한다는 문제가 있다.;;
암튼,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim_runtime/source_not_forked
git clone git://github.com/wavded/vim-stylus.git
git add vim-stylus
git commit -m &lt;span class="s2"&gt;&amp;quot;add vim-stylus plugin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이렇게 하면 구성 끝. VIM에서도 Stylus를 쉽게.&lt;/p&gt;</content><category term="css"></category><category term="web"></category><category term="vim"></category><category term="git"></category><category term="npm"></category></entry><entry><title>MacVim 전체화면 깨짐 해결</title><link href="https://soundlake.net/posts/2014/12/18/macvim-fullscreen-ko/" rel="alternate"></link><published>2014-12-18T10:00:00+01:00</published><updated>2018-04-08T02:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2014-12-18:/posts/2014/12/18/macvim-fullscreen-ko/</id><summary type="html">&lt;p&gt;Mac 업데이트 후, MacVim 전체화면을 실행하면 화면 오른쪽에 밝은 색의 막대가 생겨났다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="밝은 색 막대가 생긴 MacVim 전체화면모드" src="https://soundlake.net/images/20141218_screen.png"&gt;&lt;/p&gt;
&lt;p&gt;한동안 좀 짜증이 났지만 그래도 견딜만 해서 참았다가, 오늘 생각난 김에 이것도 해결. 멕북은 화면 베젤이 까만 색이니 화면이 어두운데 거기 한 부분만 밝으니 여간 신경쓰이는 게 아니었다.&lt;/p&gt;
&lt;p&gt;한참 찾다가 결국 &lt;a href="https://code.google.com/p/macvim/issues/detail?id=454"&gt;두둥!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;결국 해결 방법은,
    1. 설정창을 열자 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mac 업데이트 후, MacVim 전체화면을 실행하면 화면 오른쪽에 밝은 색의 막대가 생겨났다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="밝은 색 막대가 생긴 MacVim 전체화면모드" src="https://soundlake.net/images/20141218_screen.png"&gt;&lt;/p&gt;
&lt;p&gt;한동안 좀 짜증이 났지만 그래도 견딜만 해서 참았다가, 오늘 생각난 김에 이것도 해결. 멕북은 화면 베젤이 까만 색이니 화면이 어두운데 거기 한 부분만 밝으니 여간 신경쓰이는 게 아니었다.&lt;/p&gt;
&lt;p&gt;한참 찾다가 결국 &lt;a href="https://code.google.com/p/macvim/issues/detail?id=454"&gt;두둥!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;결국 해결 방법은,
    1. 설정창을 열자. MacVim -&amp;gt; Preference..(Cmd+,)
    2. Advanced 탭으로.
    3. Prefer native fullscreen mode.. 를 비 활성화.
    4. Full screen mode 풀었다가 다시 돌아오면,
    5. 짜잔. 해결.&lt;/p&gt;</content><category term="vim"></category><category term="MacVim"></category><category term="Mac"></category></entry><entry><title>VIM에서 한글 사용하기</title><link href="https://soundlake.net/posts/2014/12/18/using-hangul-in-vim-ko/" rel="alternate"></link><published>2014-12-18T10:00:00+01:00</published><updated>2018-04-08T02:00:00+02:00</updated><author><name>soundlake</name></author><id>tag:soundlake.net,2014-12-18:/posts/2014/12/18/using-hangul-in-vim-ko/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.vim.org"&gt;VIM&lt;/a&gt;의 위대함을 설파하는 건 이미 많은 사람이 했고.
문제는 한글을 사용하기가 좀 불편하다는 거다.
물론 에디터 자체는 유니코드를 지원하니 한글을 사용할 수 있지만,
문제는 normal mode에서 명령어 입력을 해야 하는데,
insert mode와 normal mode를 움직일 때마다 한영 변경을 해줘야 하니,
한영 변경을 Cmd+Space로 하는 맥유저로서는 깝깝한 일이다.&lt;/p&gt;
&lt;p&gt;역시 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.vim.org"&gt;VIM&lt;/a&gt;의 위대함을 설파하는 건 이미 많은 사람이 했고.
문제는 한글을 사용하기가 좀 불편하다는 거다.
물론 에디터 자체는 유니코드를 지원하니 한글을 사용할 수 있지만,
문제는 normal mode에서 명령어 입력을 해야 하는데,
insert mode와 normal mode를 움직일 때마다 한영 변경을 해줘야 하니,
한영 변경을 Cmd+Space로 하는 맥유저로서는 깝깝한 일이다.&lt;/p&gt;
&lt;p&gt;역시 해법은 있었다. &lt;a href="http://www.myip.co.kr/mbbs/tip/139818"&gt;원문참조&lt;/a&gt;
모두 세 가지 방법이 있었고, 역시 마지막 방법이 제일 좋은 듯 하다.&lt;/p&gt;
&lt;h4&gt;1. map을 이용해 ㅓ를 j에 매핑시키는 방식이다.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가장 기초적인 방법&lt;/li&gt;
&lt;li&gt;두벌식에서 세벌식 갈아타면, 다 바꿔야 한다. -_-..&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. inoremap을 이용해 insert mode에서 normal mode로 바뀔 때, 자동으로 영문으로 쓰게 하는 거다.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;iminsert&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;환경에 따라 동작하지 않을 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. normal mode에서 환경 input method를 무시하고 키값을 입력받는 거다.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;imdisable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; I :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; A :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;A
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;o&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; O :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;O
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;환경 불문하고 잘 되는 방법.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;수정. 2014-12-21
뭔가 이상하게 작동했다. 설정을 하고 나서, &lt;code&gt;input mode&lt;/code&gt;에서 &lt;code&gt;normal mode&lt;/code&gt;로 나오면,
분명히 잘 작동하는데, 문제는 &lt;code&gt;normal mode&lt;/code&gt;에서 &lt;code&gt;input mode&lt;/code&gt;로 들어갈 때였다.
원래대로라면 분명히 &lt;code&gt;input mode&lt;/code&gt;에서의 IM 상태를 저장해놓았다가,
&lt;code&gt;normal mode&lt;/code&gt;에서 &lt;code&gt;input mode&lt;/code&gt;로 들어가면 저장된 상태가 나와야 하는데,
이건 들어갈 때마다 한글 키가 작동되는 거다.
물론 블로그 쓸 때처럼 한글을 많이 쓸 때도 있지만,
코딩을 할 때는 한글보다는 영문을 많이 쓸테니,
이것도 불편한 노릇이었다. 그래서 다시 찾아보니,
&lt;a href="http://vim.1045645.n5.nabble.com/Macvim-doesn-t-work-properly-with-chinese-input-method-td4340958.html"&gt;어느 중국인도 불편함을 토로하고 있더라&lt;/a&gt;. &lt;a href="http://seorenn.blogspot.be/2011/04/vim-vim-esc.html"&gt;어느 한국인도 찾아놓았더라&lt;/a&gt;.
사실 멋진 건, MacVim 개발자들이 이미 다 구현해놓았다는 것. 위에서처럽 복잡한 설정 없이,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noimd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이거 하나로 해결. -_-.&lt;/p&gt;
&lt;p&gt;요즘 새삼 느끼는 거지만, 등잔 밑이 어둡다. 파랑새는 우리집에 있었다.&lt;/p&gt;</content><category term="vim"></category><category term="vimrc"></category></entry></feed>